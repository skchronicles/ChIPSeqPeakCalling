##########################################################################################################
# Benchmarking of ChIP-Seq peak Callers: Comparing Peaks to known motifs
# Author: Skyler Kuhn (NIH/NCI) [C]
# CCR Collaborative Bioinformatics Resource
# Version 1.0.0
# See README.MD for more information
# USAGE:
#
##########################################################################################################

from __future__ import print_function, division


def createMotifsDictionary(filename, padding=100):
    """
    Storing Motif Information into a dictionary: {chrN: [(start1, stop1), (start2, stop2)..]}
    :param filename:  # motifs filename
    :param padding:   # left and right start/stop padding (concerned about peaks 100bp from a known motif)
    :return motifDictionary: # used by motifOverLap to find
    """
    fh = open(filename, "r")
    header = next(fh)  # skip over header
    motifDict = {}
    for line in fh:
        linelist = line.strip().split("\t")
        #print(linelist)
        chr, start, stop = linelist[1], int(linelist[2]), int(linelist[3])
        if chr not in motifDict:
            motifDict[chr] = []
        motifDict[chr].append((start-padding, stop+padding))
    #print(motifDict, "\n\n")
    return motifDict


def peakMotifOverLap(peakfilename, motifDict, npeaks, peakcaller):
    """
    Determining if the top N peaks generated by X Peak Caller are within 100 bp of known TF motifs
    :param peakfilename:
    :param npeaks:
    :return outfile:
    """
    fh = open(peakfilename, "r")
    nfh = fh.readlines()[:npeaks]
    count = 0
    for line in nfh:
        linelist = line.strip().split("\t")
        #print(linelist)
        pchr, pstart, pstop = linelist[0], int(linelist[1]), int(linelist[2])
        #print(pchr, pstart, pstop)
        try:
            motifregions = motifDict[pchr]
            for region in motifregions:
                mstart, mstop = region[0], region[1]
                if max(mstart, pstart) - min(mstop, pstop) <= 0:
                    count += 1   # there is an overlap between a peak and a known motif
                    break
        except KeyError:
            print("It looks like there are no known motifs for {}. It could be that chr bed formatting is different.".format(pchr))  # write to file that no peaks aligned with motif
    yield npeaks, count/npeaks, peakcaller
    #print(npeaks, count/npeaks, peakcaller)
    fh.close()


def main():
    # Output File
    callerUsed = "SICER"
    outfh = open("{}_fractionTOPNPEAKS.txt".format(callerUsed), "w")
    # Creating motifs dictionary for latter mapping
    motifsDict = createMotifsDictionary("fimo.txt")
    for i in range(1, 501):
        for np, fraction, caller in peakMotifOverLap("SICER_STAT1rep1_A.txt", motifsDict, i, callerUsed):
            print(np, fraction, caller)
            outfh.write("{}\t{}\t{}\n".format(np, fraction, caller))


if __name__ == "__main__":
    main()
